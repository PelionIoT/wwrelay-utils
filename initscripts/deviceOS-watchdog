#!/bin/bash
# /etc/init.d/deviceOS-watchdog: starts deviceOS watchdog which Runner keeps fed.
# good article on runlevel info: http://www.thegeekstuff.com/2012/03/lsbinit-script/
# 
### BEGIN INIT INFO
# Provides:             deviceOSwatchdog
# Required-Start:       $remote_fs $time
# Required-Stop:        
# Should-Start:         $network
# Should-Stop:          
# Default-Start:        5
# Default-Stop:         0 1 
# Short-Description:    watchdog timer for the relay
### END INIT INFO

PROG_PATH="/wigwag/system/bin"
PROG="deviceOSWD"
#PROG="deviceOSWD_a10_debug"
KEEPALIVE="/var/deviceOSkeepalive"
PID_PATH="/var/run"

#this is fixed by the binary... you cannot change it, so go with it.
FIXED_PID_FILE="deviceOSWD.pid"
START_DEVICEOSWD_CMD="$PROG_PATH/$PROG -w 300 -m 90 -s $KEEPALIVE -d -p $PID_PATH/"
STOP_DEVICEOSWD_CMD="echo -e \"stop\" | socat unix-sendto:$KEEPALIVE STDIO"


#this script includes a test program that will crash the kernel on purpose, enabling you test out the entire watchdog system.  To run the test, simply set set the PANICLOOP_TIME to the amount of time you want the kernel up and running After the allotted time, the PANICLOOP_TESTPROGRAM will cause a kernel panic.   The panic loop test program also logs the number of reboots to a file at /wigwag/log/panic.log to count the number of reboots.  It also turns the led "white" just before a panic.  This lets you visually know about a panic coming. A PANICLOOP_TIME of 45 seconds should be enough time for you to login  and set the the loop time to 0 seconds, (which prevents the panic loop test from running.)  Anything less you will have to use other tools to stop the loop test.
PANICLOOP_TESTPROGRAM="/wigwag/wwrelay-utils/dev-tools/bin/panic.sh"


#zero will not panic.  Anything above a 0 will panic the system after (x) seconds
#dont set this above 0 unless you know what your doing and your testing something
PANICLOOP_TIME=0;

start() {
    if [ -e "$PID_PATH/$PROG.pid" ]; then
        ## Program is running, exit with error.
        echo "Error! $PROG is currently running!" 1>&2
        exit 1
    else
        ## Change from /dev/null to something like /var/log/$PROG if you want to save output.
        pgrep $PROG
        pkill $PROG
        $START_DEVICEOSWD_CMD
        if [[ $PANICLOOP_TIME -ne 0 ]]; then
            $PANICLOOP_TESTPROGRAM $PANICLOOP_TIME &
        fi
    fi
}

humanhalt() {
    if [ -e "$PID_PATH/$FIXED_PID_FILE" ]; then
        ## Program is running, so stop it
        pid=`cat $PID_PATH/$FIXED_PID_FILE`
        eval "$STOP_DEVICEOSWD_CMD"
        kill -9 $pid
        rm "$PID_PATH/$FIXED_PID_FILE"
        echo "$PROG stopped ($pid)"
    else
        ## Program is not running, exit with error.
        echo "Error! $PROG not started!" 1>&2
        exit 1
    fi
}


update(){
    t="$2"
    SOCATCMD="echo -e \"up $t\" | socat unix-sendto:$KEEPALIVE STDIO"; 
    echo "$SOCATCMD"
    eval "$SOCATCMD"
    if [[ $? -eq 0 ]]; then
        echo "update successful"
    else
        echo "update failed"
    fi
}
panic(){
    insmod /lib/modules/4.2.0-rc8/extra/panic.ko
}

status(){
    if [[ -e $PID_PATH/$FIXED_PID_FILE ]]; then
        pid=`cat $PID_PATH/$FIXED_PID_FILE`
        echo "$PROG (pid $pid) is running... logging to /var/log/syslog"
    else
        echo "$PROG not running."
    fi
}

## Check to see if we are running as root first.
if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root" 1>&2
    exit 1
fi


case "$1" in
    start)
        #
        start
        exit 0
        ;;
    #
    humanhalt)
        #
        humanhalt
        exit 0
        ;;
    #
    status)
        #
        status
        exit 0
        ;;
    #
    panic)
        #
        panic
        exit 0
        ;;
    #
    reload|restart|force-reload)
        #
        humanhalt
        start
        exit 0
        ;;
    #
    update)
        #
        update $@
        exit 0
        ;;
    #
    **)
        #
        echo "Usage: $0 {start|humanhalt|status|panic|reload|restart|update <sec>}" 1>&2
        exit 1
        ;;
#
esac
