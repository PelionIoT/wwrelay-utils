unixLogSocket: /tmp/grease.socket
sysLogSocket: /dev/log
httpUnixSocket: /tmp/maestroapi.sock
configDBPath: /wigwag/system/bin/maestroConfig.db
clientId: "{{ARCH_RELAYID}}"
watchdog:
    path: "/wigwag/system/lib/rp100wd.so"
    opt1: "/var/deviceOSkeepalive"
    opt2: "30"
network:
    interfaces:
        - if_name: eth0
          dhcpv4: true
          # set the mac addresses for this interface also:
          hw_addr: "{{ARCH_ETHERNET_MAC}}"
processes:
    reaper_interval: 1500
platform_readers:
    - platform: "wwrelayA10"
# relaymq:
#     host: "{{ARCH_relaymqHost}}"
#     logging: true
#     client_cert: "{{ARCH_CLIENT_CERT_PEM}}"
#     client_key: "{{ARCH_CLIENT_KEY_PEM}}"
#     ---Only specify server_name if the RootCA is not in the default list
#     This is only a valid option if you are not using a well-known CA
#    server_name: "devcloud.wigwag.io"
var_defs:
   - key: "TMP_DIR"
     value: "/tmp"
   - key: "WIGWAG_NODE_PATH"
     value: "/wigwag/devicejs-core-modules/node_modules"
   - key: "WIGWAG_DIR"
     value: "/wigwag"
   - key: "NODE_EXEC"
     value: "/usr/bin/node"
   - key: "DEVICEJS_ROOT"
     value: "/wigwag/devicejs-ng"
   - key: "DEVJS_CORE_MODULES"
     value: "/wigwag/devicejs-core-modules"
   - key: "MAESTRO_RUNNER_DIR"
     value: "/wigwag/devicejs-core-modules/maestroRunner"
   - key: "SSL_CERTS_PATH"
     value: "/wigwag/devicejs-core-modules/Runner/.ssl"
   - key: "LOCAL_DEVICEDB_PORT"
     value: 9000
   - key: "LOCAL_DATABASE_STORAGE_DIRECTORY"
     value: "/userdata/etc/devicejs/db"
   - key: "RELAY_VERSIONS_FILE"
     value: "/wigwag/etc/versions.json"
   - key: "FACTORY_VERSIONS_FILE"
     value: "/mnt/.overlay/factory/wigwag/etc/versions.json"
   - key: "USER_VERSIONS_FILE"
     value: "/mnt/.overlay/user/slash/wigwag/etc/versions.json"
   - key: "UPGRADE_VERSIONS_FILE"
     value: "/mnt/.overlay/upgrade/wigwag/etc/versions.json"
sys_stats: # system stats intervals
  vm_stats:
    every: "15s"
    name: vm
  disk_stats:
    every: "30s"
    name: disk
mdns: 
  # disable: true
  static_records:
   - name: "WigWagRelay"
     service: "_wwservices._tcp"  # normally something like https or ftp
     # domain: "local"     # local is default
     interfaces: "eth0"
     not_interfaces: "Witap0"
     port: 3131
     text: 
      - "wwid={{ARCH_RELAYID}}"
     hostname: "wigwaggateway"
   - name: "WigWagRelay_{{ARCH_RELAYID}}"
     service: "_wwservices._tcp"  # normally something like https or ftp
     # domain: "local"     # local is default
     interfaces: "eth0"
     not_interfaces: "Witap0"
     port: 3131
     text: 
      - "wwid={{ARCH_RELAYID}}"
     hostname: "{{ARCH_RELAYID}}"
symphony:
# symphony system management APIs
    # defaults to 10:
    sys_stats_count_threshold: 15     # send if you have 15 or more stats queued
    sys_stats_time_threshold: 120000  # every 120 seconds send stuff, no matter what
    client_cert: "{{ARCH_SSL_CLIENT_CERT_PEM}}"
    client_key: "{{ARCH_SSL_CLIENT_KEY_PEM}}"
    host: "{{ARCH_RELAY_SERVICES_HOST}}"
    # port: "{{ARCH_RELAY_SERVICES_PORT}}"
targets:
   - file: "/wigwag/log/devicejs.log"
     rotate:
         max_files: 10
         max_file_size: 10000
         max_total_size: 100000
         rotate_on_start: true
     delim: "\n"
     format_time: "[%ld:%d] "
     format_level: "<%s> "
     format_tag: "{%s} "
     format_origin: "(%s) "
     filters:
       - level: log,user1,user2
         format_pre: "\u001B[39m"    # normal       
       - level: trace
         format_pre: "\u001B[35m"    # purple
         format_post: "\u001B[39m"         
       - level: info
         format_pre: "\u001B[2m"     # 'dim' text
         format_post: "\u001B[39m"
       - levels: success
         format_pre: "\u001B[32m"    # green
         format_post: "\u001B[39m"       
       - levels: warn
         format_pre: "\u001B[33m"    # yellow
         format_post: "\u001B[39m"       
       - levels: error
         format_pre: "\u001B[31m"    # red
         format_post: "\u001B[39m"
       - levels: debug
         format_pre: "\u001B[36m"    # cyan
         format_post: "\u001B[39m"
       - levels: debug2,debug3
         format_pre: "\u001B[34m"    # blue
         format_post: "\u001B[39m"
       - levels: log
         tag: stdout
         format_pre: "\u001B[39m"    # normal
         format_post: "\u001B[39m"
#   - file: "{{TMP_DIR}}/maestro.log"
   # - TTY: "console"
   #   rotate:
   #       max_files: 10
   #       max_file_size: 10000
   #       max_total_size: 100000
   #       rotate_on_start: true
   #   delim: "\n"
   #   format_time: "[%ld:%d] "
   #   format_level: "<%s> "
   #   format_tag: "{%s} "
   #   format_origin: "(%s) "
   #   filters:
   #     - levels: error
   #       format_pre: "\u001B[31m"
   #       format_post: "\u001B[39m"
   #     - levels: debug
   #       format_pre: "\u001B[36m"
   #       format_post: "\u001B[39m"
# JSON file
   # - file: /tmp/json-maestro.log
   #   rotate:
   #       max_files: 10
   #       max_file_size: 10000
   #       max_total_size: 100000
   #       rotate_on_start: true
   #   delim: "],\n"
   #   format_time: "{\"time\":\"%ld:%d\"}, "
   #   format_level: "{\"level\":\"%s\"}, "
   #   format_tag: "{\"tag\":\"%s\"}, "
   #   format_origin: "{\"origin\":\"%s\"}, "
   #   format_pre_msg: "{ \"msg\":\""
   #   format_post: "\"}"
   #   flag_json_escape_strings: true
   #   filters:
   #     - levels: all
   #       format_pre: "["     # you will wrap this output with { "log": [ OUTPUT ] }



#         format_post: "]}"  # I am not sure if this works
   # - name: "toCloud"  # this is a special target for sending to the cloud. It must send as a JSON
   #   format_time: "\"time\":\"%ld:%d\", "
   #   format_level: "\"level\":\"%s\", "
   #   format_tag: "\"tag\":\"%s\", "
   #   format_origin: "\"origin\":\"%s\", "
   #   format_pre_msg: "\"msg\":\""
   #   format_post: "\"}"
   #   flag_json_escape_strings: true
   #   filters:
   #     - levels: all
   #       format_pre: "{"     # you will wrap this output with { "log": [ OUTPUT ] }
static_file_generators:
   - name: "devicejs"
     template_file: "/wigwag/wwrelay-utils/conf/maestro-conf/template.devicejs.conf"
     output_file: "/wigwag/etc/devicejs/devicejs.conf" 
   - name: "devicedb"
     template_file: "/wigwag/wwrelay-utils/conf/maestro-conf/template.devicedb.conf"
     output_file: "/wigwag/etc/devicejs/devicedb.yaml"  
   - name: "relayTerm"
     template_file: "/wigwag/wwrelay-utils/conf/maestro-conf/relayTerm.template.json"
     output_file: "/wigwag/wigwag-core-modules/relay-term/config/config.json"  
   - name: "radioProfile"
     template_file: "/wigwag/devicejs-core-modules/rsmi/radioProfile.template.json"
     output_file: "/wigwag/devicejs-core-modules/rsmi/radioProfile.config.json"  
   - name: "ca_pem"
     template: "{{ARCH_SSL_CA_PEM}}"
     output_file: "{{SSL_CERTS_PATH}}/ca.cert.pem"
   - name: "intermediate_ca_pem"
     template: "{{ARCH_SSL_CA_INTERMEDIATE_PEM}}"
     output_file: "{{SSL_CERTS_PATH}}/intermediate.cert.pem"
   - name: "client_key"
     template: "{{ARCH_SSL_CLIENT_KEY_PEM}}"
     output_file: "{{SSL_CERTS_PATH}}/client.key.pem"
   - name: "client_cert"
     template: "{{ARCH_SSL_CLIENT_CERT_PEM}}"
     output_file: "{{SSL_CERTS_PATH}}/client.cert.pem"
   - name: "server_key"
     template: "{{ARCH_SSL_SERVER_KEY_PEM}}"
     output_file: "{{SSL_CERTS_PATH}}/server.key.pem"
   - name: "client_cert"
     template: "{{ARCH_SSL_SERVER_CERT_PEM}}"
     output_file: "{{SSL_CERTS_PATH}}/server.cert.pem"
   - name: "ca_chain"
     template: "{{ARCH_SSL_CA_CHAIN_PEM}}"
     output_file: "{{SSL_CERTS_PATH}}/ca-chain.cert.pem"
container_templates:
   - name: "deviceJS_process"
     immutable: true  # don't store in DB
     depends_on:
        - "devicejs"
     cgroup:                 # will implement later
        mem_limit: 10000000
     die_on_parent_death: true
     inherit_env: true
     add_env:
        - "DEVJS_ROOT={{DEVICEJS_ROOT}}"
        - "DEVJS_CONFIG_FILE=/wigwag/etc/devicejs/devicejs.conf"
        - "NODE_PATH={{WIGWAG_NODE_PATH}}"
     exec_cmd: "{{NODE_EXEC}}"        # will use PATH if not absolute path (as per execvp())
     send_composite_jobs_to_stdin: true
     send_grease_origin_id: true
     exec_pre_args: 
        - "--max-old-space-size=128"
        - "--max-semi-space-size=1"
        - "{{MAESTRO_RUNNER_DIR}}/index.js"
     composite_config: >
        {
           "debug":true
        }
   - name: "node_process"
     die_on_parent_death: true
     immutable: true  # don't store in DB
     cgroup:                 # will implement later
        mem_limit: 10000000
     inherit_env: true
     exec_cmd: "{{NODE_EXEC}}"        # will use PATH if not absolute path (as per execvp())
     exec_pre_args: 
        - "--max-old-space-size=128"
        - "--max-semi-space-size=1"
jobs:
   - job: "devicedb"
     immutable: true
     die_on_parent_death: true
     exec_cmd: "/usr/bin/devicedb"
     restart: true
     restart_limit: 5000
     restart_pause: 1
     exec_args: 
        - "start"
        - "-conf=/wigwag/etc/devicejs/devicedb.yaml"  
   - job: "devicejs"
     defer_running_status: 8000   # waits 8 seconds before marking this Job as RUNNING, which delays all dependencies
     depends_on:
        - "devicedb"
     container_template: "node_process"
     immutable: true 
     die_on_parent_death: true
     env:
        - "NODE_PATH={{DEVICEJS_ROOT}}/node_modules"
        - "DEVJS_LOGGER={\"modulepath\":\"{{WIGWAG_NODE_PATH}}/grease-log-client\",\"type\":\"global\"}"
     exec_cmd: "{{DEVICEJS_ROOT}}/src/runtime/start"
     restart: true
     restart_limit: 5000
     restart_pause: 10
     exec_args:
        - "--config=/wigwag/etc/devicejs/devicejs.conf"
   - job: "wigwagdevice"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../wigwag-devices"
     container_template: "deviceJS_process"
     composite_id: "all-modules"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
          "cloudURL":"{{ARCH_CLOUD_URL}}",
          "ssl":{
              "key":"{{SSL_CERTS_PATH}}/client.key.pem",
              "cert":"{{SSL_CERTS_PATH}}/client.cert.pem",
              "ca":[
                  "{{SSL_CERTS_PATH}}/ca.cert.pem",
                  "{{SSL_CERTS_PATH}}/intermediate.cert.pem"
              ]
          },
          "apiKey":"{{ARCH_RELAYID}}",
          "udpSourcePort":3000,
          "udpDestinationPort":3001,
          "platform":"{{ARCH_WW_PLATFORM}}",
          "sixlbr":{
              "ifname":"Witap0",
              "wsnNet":"bbbb::100",
              "sixlbr":{
                  "tundev":"Witap0",
                  "use_raw_ethernet":false,
                  "log_level":[
                      "error"
                  ],
                  "platform":"{{ARCH_WW_PLATFORM}}",
                  "siodev":"tty6lbr",
                  "siodev_secondary":"ttyUSB1",
                  "sixBMAC":"{{ARCH_SIXLBR_MAC}}",
                  "baudrate":115200,
                  "slip_delay":0,
                  "watchdog_interval": 0,
                  "ww_encryption":true,
                  "firmware_path_mc1322":"/home/wigwag/workspace/devicejs/core/",
                  "firmware_file_prefix":"slip-radio_econotag",
                  "reset_GPIO_path_firmware_mc1322":"/sys/class/gpio/gpio105/value",
                  "erase_GPIO_path_firmware_mc1322":"/sys/class/gpio/gpio103/value",
                  "reset_GPIO_path_firmware_cc2530":"/sys/class/gpio/gpio98/value",
                  "relay_version":7,
                  "nvm_data":{
                      "channel":20,
                      "rpl_dio_intdoubl":1,
                      "rpl_dio_intmin":12,
                      "rpl_default_lifetime":4,
                      "rpl_lifetime_unit":100,
                      "rpl_version_id":247
                  }
              }
          }         
        }
   # - job: "core-lighting"
   #   immutable: true  # don't store in DB
   #   exec_cmd: "${thisdir}/../core-lighting"
   #   container_template: "deviceJS_process"
   #   composite_id: "all-modules"
   #   restart: true
   #   restart_limit: 5000
   #   restart_pause: 90
   #   config: |
   #      {}
   #   exec_cmd: "${thisdir}/../IPStack"
   #   container_template: "deviceJS_process"
   #   composite_id: "all-modules"
   #   restart: true
   #   restart_limit: 5000
   #   restart_pause: 90
   # - job: "sonos"
   #   immutable: true  # don't store in DB
   #   exec_cmd: "${thisdir}/../sonos"
   #   container_template: "deviceJS_process"
   #   composite_id: "all-modules"
   #   restart: true
   #   restart_limit: 5000
   #   restart_pause: 90
   #   config: |
   #      {}
   - job: "core-interfaces"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../core-interfaces"
     container_template: "deviceJS_process"
     composite_id: "all-modules"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {}
   - job: "zigbeeHA"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../zigbeeHA"
     container_template: "deviceJS_process"
     composite_id: "zigbee"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
          "siodev":"/dev/ttyZigbee",
          "devType":0,
          "newNwk":false,
          "channelMask":25,
          "baudRate":115200,
          "log_level":1,
          "networkRefreshDuration":17000,
          "panIdSelection":"randomInRange",
          "panId":23,
          "platform":"{{ARCH_WW_PLATFORM}}",
          "logLevel": 2 //Available- info- 2, debug- 3, trace- 4, error- 0, warn- 1
        }
   - job: "RelayStatsSender"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../../wigwag-core-modules/RelayStatsSender"
     container_template: "deviceJS_process"
     composite_id: "user"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
          "cloudAddress":"{{ARCH_CLOUD_URL}}",
          "relayID":"{{ARCH_RELAYID}}",
          "ssl":{
              "key":"{{SSL_CERTS_PATH}}/client.key.pem",
              "cert":"{{SSL_CERTS_PATH}}/client.cert.pem",
              "ca":[
                  "{{SSL_CERTS_PATH}}/ca.cert.pem",
                  "{{SSL_CERTS_PATH}}/intermediate.cert.pem"
              ]
          },
          "versionsFile":"{{RELAY_VERSIONS_FILE}}",
          "factoryVersionsFile": "{{FACTORY_VERSIONS_FILE}}",
          "userVersionsFile": "{{USER_VERSIONS_FILE}}",
          "upgradeVersionsFile": "{{UPGRADE_VERSIONS_FILE}}",
          "relayInfo": {
              "pairingCode": "{{ARCH_PAIRING_CODE}}",
              "serialNumber": "{{ARCH_RELAYID}}",
              "hardwareVersion": "{{ARCH_HARDWARE_VERSION}}",
              "radioConfig": "{{ARCH_RADIO_CONFIG}}",
              "ledConfig": "{{ARCH_LED_COLOR_PROFILE}}",
              "cloudServer": "{{ARCH_CLOUD_URL}}",
              "devicejsServer": "{{ARCH_CLOUD_DEVJS_URL}}",
              "devicedbServer": "{{ARCH_CLOUD_DDB_URL}}",
              "ethernetMac": "{{ARCH_ETHERNET_MAC}}"   
          }
        }
   - job: "ww-zwave"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../ww-zwave"
     container_template: "deviceJS_process"
     composite_id: "all-modules"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
          "serialInterfaceOptions":{
              "siodev":"/dev/ttyZwave",
              "baudrate":115200,
              "dataBits":8,
              "stopBits":1
          },
          "platform":"{{ARCH_WW_PLATFORM}}"
        }
   # - job: "IPStack"
   #   immutable: true  # don't store in DB
   #   config: |
   #      {
   #        "wan":[
   #            "eth0",
   #            "eth1",
   #            "wlan0"
   #        ],
   #        "dhcp":"on",
   #        "static":{
   #            "ipaddress":"10.10.20.31",
   #            "mask":"255.255.255.0",
   #            "gateway":"10.10.20.1"
   #        },
   #        "ethernetMAC":"{{ARCH_ETHERNET_MAC}}"
   #      }
   # - job: "MDNS"
   #   immutable: true  # don't store in DB
   #   exec_cmd: "${thisdir}/../../wigwag-core-modules/MDNS"
   #   container_template: "deviceJS_process"
   #   composite_id: "all-modules"
   #   restart: true
   #   restart_limit: 5000
   #   restart_pause: 90
   #   config: |
   #      {
   #        "id":"{{ARCH_RELAYID}}",
   #        "waitForIPStack":true,
   #        "port":443
   #      }
   - job: "LEDController"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../../wigwag-core-modules/LEDController"
     container_template: "deviceJS_process"
     composite_id: "user"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
          "ledBrightness": 5,
          "heartbeatBrightness": 2,
          "ledColorProfile":"{{ARCH_LED_COLOR_PROFILE}}",
          "ledDriverSocketPath": "/var/deviceOSkeepalive"
        }
   - job: "VirtualDeviceDriver"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../../wigwag-core-modules/VirtualDeviceDriver"
     container_template: "deviceJS_process"
     composite_id: "user"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
          "deviceControllersDirectory": "templates",
          "hideTemplates": [ "VideoCamera" ],
          "logLevel": 1
        }
   - job: "ModbusRTU"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../ModbusRTU"
     container_template: "deviceJS_process"
     composite_id: "modbus"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
          "serialInterfaceOptions":{ //Serial communication setup parameters
              "siodev":"/dev/ttymodbus",
              "baudrate":19200,
              "dataBits":8,
              "stopBits":1,
              "parity":"none",
              "endPacketTimeout":25
          },
          "logLevel":1,   //Available- info- 2,debug- 3,trace- 4,error- 0,warn- 1
          "relayId": "{{ARCH_RELAYID}}",
          "platform":"{{ARCH_WW_PLATFORM}}",    //Used to identify platform so that module can adapt and run automagically
          "maxTransportRetries":3, //Transport layer retries, message retries are default to 3 so total retries will be 4
          "requestAckTimeout":2000,  //Timeout if no data received on request (in ms)
          "throttleRate": 100,
          "modbusResourceId":"ModbusDriver", //ID on which the Modbus module will be registered with DeviceJS
          "supportedResourceTypesDirectory":"controllers/supportedResourceTypes", //Directory where all the resouces are or will be defined,
          "runtimeResourceTypesDirectory":"controllers/runtimeResourceTypes",
          "simulate":false, //Should be false in production, if true it will run even if there is no terminal connected
          "schedulerIntervalResolution":500    //in ms, interval in which it will check if a resource command needs to be polled. Minimum 500ms.
                                              //Define polling interval of device controller at this resolution
        }
   - job: "BACnet"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../BACnet"
     container_template: "deviceJS_process"
     composite_id: "bacnet"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
          "serialInterfaceOptions": { //Used to setup comms with BACnet device
              "siodev": "/dev/ttybacnet",
              "baudrate": 76800,
              "dataBits": 8,
              "parity": "none",
              "stopBits": 1
          },
          "socketInterfaceOptions": {
              "sockPort": 7871,
              "sockAddr": "127.0.0.1",
              "lib": "/wigwag/system",
              "program": "bin",
              "exe": "bacportal"
          },
          "macAddr": 126,
          "activityLength": 100,
          "logLevel": 1, //Available- info- 2, debug- 3, trace- 4, error- 0, warn- 1
          "nativeLogLevel": "WARN", //FATAL : 0, ERROR : 10, WARN : 20, ROUTING : 30, INFO : 40, DEBUG : 50, PACKET : 60, DUMP : 70, TRACE : 80, ALL :127
          "relayId": "{{ARCH_RELAYID}}",
          "platform": "{{ARCH_WW_PLATFORM}}", //Used to identify platform so that module can adapt and run automagically
          "requestAckTimeout": 300, //ms
          "throttleRate": 50, //ms
          "bacnetResourceId": "BacnetDriver",
          "stateManagerIntervalResolution": 12000,
          "supportedRecipesDirectory": "controllers/supportedResourceRecipes" //Relative path to directory where all the resouce recipes are or will be defined,
        }
   # - job: "RuleEngine"
   #   immutable: true  # don't store in DB
   #   exec_cmd: "${thisdir}/../../wigwag-core-modules/RuleEngine"
   #   container_template: "deviceJS_process"
   #   composite_id: "user"
   #   restart: true
   #   restart_limit: 5000
   #   restart_pause: 90
   #   config: |
   #      {
   #        "cloudAddress":"{{ARCH_CLOUD_URL}}",
   #        "relayID":"{{ARCH_RELAYID}}",
   #        "ssl":{
   #            "key":"{{SSL_CERTS_PATH}}/client.key.pem",
   #            "cert":"{{SSL_CERTS_PATH}}/client.cert.pem",
   #            "ca":[
   #                "{{SSL_CERTS_PATH}}/ca.cert.pem",
   #                "{{SSL_CERTS_PATH}}/intermediate.cert.pem"
   #            ]
   #        }
   #      }
   - job: "SchedulerEngine"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../../wigwag-core-modules/SchedulerEngine"
     container_template: "deviceJS_process"
     composite_id: "user"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
          "logLevel": 2 //Available- error- 0, warn- 1, info- 2, debug- 3, trace- 4
        }
   - job: "OnsiteEnterpriseServer"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../../wigwag-core-modules/onsite-enterprise-server"
     container_template: "deviceJS_process"
     composite_id: "user"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
          "prodPort": "3131",
          "modelDefinitions": "/api/models",
          "logRequests": false,
          "logLevel": 2
        }
   # - job: "AppServer"
   #   immutable: true  # don't store in DB
   #   exec_cmd: "${thisdir}/../AppServer"
   #   container_template: "deviceJS_process"
   #   composite_id: "user"
   #   restart: true
   #   restart_limit: 5000
   #   restart_pause: 90
   #   config: |
   #      {
   #        "authentication":{
   #            "enabled":true,
   #            "cloudAPISecret":"{{ARCH_PAIRING_CODE}}",
   #            "redirectURL":"/wigwag-ui/s/login/",
   #            "cloudRedirectURL":"{{ARCH_CLOUD_URL}}/s/login"
   #        },
   #        "port":443,
   #        "ssl":{
   #            "key":"{{SSL_CERTS_PATH}}/client.key.pem",
   #            "cert":"{{SSL_CERTS_PATH}}/client.cert.pem",
   #            "ca":[
   #                "{{SSL_CERTS_PATH}}/ca.cert.pem",
   #                "{{SSL_CERTS_PATH}}/intermediate.cert.pem"
   #            ]
   #        },
   #        "relayID":"{{ARCH_RELAYID}}"
   #      }
   # - job: "APIProxy"
   #   immutable: true  # don't store in DB
   #   exec_cmd: "${thisdir}/../APIProxy"
   #   container_template: "deviceJS_process"
   #   composite_id: "user"
   #   restart: true
   #   restart_limit: 5000
   #   restart_pause: 90
   #   config: |
   #      {
   #        "cloudAPISecret":"{{ARCH_PAIRING_CODE}}",
   #        "apiKey":"hello",
   #        "apiSecret":"asdfdsfa"
   #      }
   # - job: "WigWagMobileUI"
   #   immutable: true  # don't store in DB
   #   exec_cmd: "${thisdir}/../../wigwag-core-modules/WigWagMobileUI"
   #   container_template: "deviceJS_process"
   #   composite_id: "user"
   #   restart: true
   #   restart_limit: 5000
   #   restart_pause: 90
   #   config: |
   #      {}
   # - job: "WigWagUI"
   #   immutable: true  # don't store in DB
   #   exec_cmd: "${thisdir}/../../wigwag-core-modules/wigwag-ui"
   #   container_template: "deviceJS_process"
   #   composite_id: "user"
   #   restart: true
   #   restart_limit: 5000
   #   restart_pause: 90
   #   config: |
   #      {
   #          "cloudAPISecret":"{{ARCH_PAIRING_CODE}}"
   #      }
   # - job: "WWRelayWebUI"
   #   immutable: true  # don't store in DB
   #   exec_cmd: "${thisdir}/../../wigwag-core-modules/WWRelayWebUI"
   #   container_template: "deviceJS_process"
   #   composite_id: "user"
   #   restart: true
   #   restart_limit: 5000
   #   restart_pause: 90
   #   config: |
   #      {}
   # - job: "RuleUI"
   #   immutable: true  # don't store in DB
   #   exec_cmd: "${thisdir}/../../wigwag-core-modules/RuleUI"
   #   container_template: "deviceJS_process"
   #   composite_id: "user"
   #   restart: true
   #   restart_limit: 5000
   #   restart_pause: 90
   #   config: |
   #      {
   #        "debug_mode":true,
   #        "debug_level":3,    // goes up to 3, default 1
   #        "RULE_NODE_TYPES_DIRECTORY":[
   #            "${thisdir}/../RuleEngine/src/nodes"
   #        ],
   #        "FORMS_DIR":[
   #            {
   #                "path":"${thisdir}/../../wigwag-core-modules/RuleUI/schemaFormDialogs",
   #                "ignores":[
   #                    "_public"
   #                ]
   #            }
   #        ]
   #      }
   # - job: "moods"
   #   immutable: true  # don't store in DB
   #   exec_cmd: "${thisdir}/../../wigwag-core-modules/moods"
   #   container_template: "deviceJS_process"
   #   composite_id: "user"
   #   restart: true
   #   restart_limit: 5000
   #   restart_pause: 90
   #   config: |
   #      {
   #        "jwtSecret":"IXPySxxr0f5X2CIqdB45eK",
   #        "apiKey":"{{ARCH_RELAYID}}",
   #        "apiSecret":"{{ARCH_PAIRING_CODE}}"
   #      }
   - job: "DevStateManager"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../../wigwag-core-modules/DevStateManager"
     container_template: "deviceJS_process"
     composite_id: "user"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
          "logLevel": 1,
          "pollingResolution": 500,
          "defaultPollingRate": 51000,
          "maxPollingCycles": 65535,
          "pollingSchemes": {
              "fast": {
                  "interval": 21500,
                  "interfaces": [
                      "Facades/HasTemperature",
                      "Facades/ThermostatGStatus",
                      "Facades/ThermostatSupplyTemperature",
                      "Facades/ThermostatReturnTemperature",
                      "Facades/ThermostatW1Status",
                      "Facades/ThermostatW2Status",
                      "Facades/ThermostatY1Status",
                      "Facades/ThermostatY2Status"
                  ]  
              },
              "medium": {
                  "interval": 293500,
                  "interfaces": [
                      "Facades/ThermostatMode",
                      "Facades/OccupiedCoolTemperatureLevel",
                      "Facades/OccupiedHeatTemperatureLevel",
                      "Facades/UnoccupiedCoolTemperatureLevel",
                      "Facades/UnoccupiedHeatTemperatureLevel",
                      "Facades/ThermostatFanMode",
                      "Facades/OccupancyMode"
                  ]
              },
              "slow": {
                  "interval": 900000,
                  "interfaces": [
                  ]
              },
              "never": {
                  "interval": 0,
                  "interfaces": [
                      "Facades/KeypadLockLevel",
                      "Facades/TemperatureDisplayMode",
                      "Facades/ThermostatDeadband",
                      "Facades/Humidity",
                      "Facades/HasMotion",
                      "Facades/UnoccupiedAutoTemperatureLevel",
                      "Facades/OccupiedAutoTemperatureLevel"
                  ]
              }
          }
        }
config_end: true