#!/bin/bash
# /etc/init.d/deviceOS-watchdog: starts deviceOS watchdog which Runner keeps fed.

### BEGIN INIT INFO
# Provides:             deviceOS-watchdog
# Required-Start:       $remote_fs $time 
# Required-Stop:        
# Should-Start:         $network
# Should-Stop:          
# Default-Start:        5
# Default-Stop:         0 1 
# Short-Description:    watchdog timer for the relay
### END INIT INFO

PROG_PATH="/wigwag/system/bin"
PROG="deviceOSWD"
#PROG="deviceOSWD_a10_debug"
KEEPALIVE="/var/deviceOSkeepalive"
PID_PATH="/var/run"

#this is fixed by the binary... you cannot change it, so go with it.
FIXED_PID_FILE="deviceOSWD.pid"
START_DEVICEOSWD_CMD="$PROG_PATH/$PROG -w 300 -m 90 -s $KEEPALIVE -d -p $PID_PATH/"
STOP_DEVICEOSWD_CMD="echo -e \"stop\" | socat unix-sendto:$KEEPALIVE STDIO"

start() {
    if [ -e "$PID_PATH/$PROG.pid" ]; then
        ## Program is running, exit with error.
        echo "Error! $PROG is currently running!" 1>&2
        exit 1
    else
        ## Change from /dev/null to something like /var/log/$PROG if you want to save output.
        $START_DEVICEOSWD_CMD

    fi
}

stop() {
    if [ -e "$PID_PATH/$FIXED_PID_FILE" ]; then
        ## Program is running, so stop it
        pid=`cat $PID_PATH/$FIXED_PID_FILE`
        eval "$STOP_DEVICEOSWD_CMD"


        rm "$PID_PATH/$FIXED_PID_FILE"
        echo "$PROG stopped ($pid)"
    else
        ## Program is not running, exit with error.
        echo "Error! $PROG not started!" 1>&2
        exit 1
    fi
}

status(){
    pid=`cat $PID_PATH/$FIXED_PID_FILE`
    if [[ $pid != "" ]]; then
        echo "$PROG (pid $pid) is running... logging to /var/log/syslog"
    else
        echo "$PROG not running."
    fi
}

## Check to see if we are running as root first.
if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root" 1>&2
    exit 1
fi


case "$1" in
    start)
        start
        exit 0
    ;;
    stop)
        stop
        exit 0
    ;;
    status)
        status
        exit 0
    ;;
    reload|restart|force-reload)
        stop
        start
        exit 0
    ;;
    **)
        echo "Usage: $0 {start|stop|reload}" 1>&2
        exit 1
    ;;
esac
